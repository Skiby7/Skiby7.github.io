[ { "title": "How to manage Wireguard peers access to LAN", "url": "/posts/wireguard-pre-post-script/", "categories": "Networking", "tags": "networking, wireguard, linux, iptables, firewall", "date": "2023-04-15 23:15:00 +0200", "snippet": "I spent an entire day trying to figure out how to restrict Wireguard clients access to the LAN network and here’s what I found. Credits to qdm12 and samboman who discussed this topic on this gist.When you enable or disable a new interface (wg-quick up/down wgX), runs the commands defined inside /etc/wireguard/wgX.conf:PreUp=Command executed before enabling the interfacePostUp=Command executed after the interface is upPostUp=You can also define multiple commandsPreDown=Command executed before disabling the interfacePostDown=Command executed after the interface is downSince there are a few commands we need to enter, we will simply create 2 scripts and set the configuration variables to PostUp=/path/to/PostUp.sh and PostDown=/path/to/PostDown.sh.Before starting, here’s my setup: Server network: 172.16.30.0/30 Network interface: eth0 Wireguard network: 10.13.13.0/24 Allowed IPs: 0.0.0.0/0, ::/0 Important Note: you can run Wireguard bare-metal or inside a docker container (I recommend wg-easy), so you have to set the MASQUERADE_INTERFACE variable accordingly. On bare-metal installations, you can find the active interface by running ip -c a in a terminal, while on docker deployments it should be eth0 (otherwise, you can open the container terminal with docker exec -it &amp;lt;container-name&amp;gt; /bin/bash and then run ip -c a).PostUp.shWIREGUARD_INTERFACE=wg0WIREGUARD_LAN=10.13.13.0/24WIREGUARD_FULL_ACCESS=10.13.13.0/25WIREGUARD_GUEST=10.13.13.128/25MASQUERADE_INTERFACE=eth0iptables -t nat -I POSTROUTING -o $MASQUERADE_INTERFACE -j MASQUERADE -s $WIREGUARD_LAN# Add a WIREGUARD_wg0 chain to the FORWARD chainCHAIN_NAME=WIREGUARD_$WIREGUARD_INTERFACEiptables -N $CHAIN_NAMEiptables -A FORWARD -j $CHAIN_NAME# Accept related or established trafficiptables -A $CHAIN_NAME -o $WIREGUARD_INTERFACE -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT# TRUSTED# Accept traffic from any trusted IP addressiptables -A $CHAIN_NAME -s $WIREGUARD_FULL_ACCESS -i $WIREGUARD_INTERFACE -j ACCEPT# GUEST# Drop traffic to your any private IP addressiptables -A $CHAIN_NAME -s $WIREGUARD_GUEST -i $WIREGUARD_INTERFACE -d 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -j DROP# Accept outgoing connections to any IP address (public because of rule above)iptables -A $CHAIN_NAME -s $WIREGUARD_GUEST -i $WIREGUARD_INTERFACE -d 0.0.0.0/0 -j ACCEPT# Drop everything else coming through the Wireguard interfaceiptables -A $CHAIN_NAME -i $WIREGUARD_INTERFACE -j DROP# Return to FORWARD chainiptables -A $CHAIN_NAME -j RETURNPeers connected to the FULL_ACCESS subnet can connect to the services hosted on the local network, while the peers on the GUEST subnet can only access to the public IP addresses. Note that you can also define other rules to filter traffic for specific peers:# DNS (allow access to LAN services)iptables -A $CHAIN_NAME -s 10.13.13.3 -i $WIREGUARD_INTERFACE -d 192.168.1.1 -p udp --dport 53 -j ACCEPT# Drop traffic to your any private IP addressiptables -A $CHAIN_NAME -s 10.13.13.3 -i $WIREGUARD_INTERFACE -d 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -j DROP# Accept outgoing connections to HTTP(S) ports to any IP address (filter access to public services)iptables -A $CHAIN_NAME -s 10.13.13.3 -i $WIREGUARD_INTERFACE -d 0.0.0.0/0 -p tcp -m multiport --dports 80,443 -j ACCEPTPostDown.shTo delete the rules after the interface is disabled:WIREGUARD_INTERFACE=wg0WIREGUARD_LAN=10.13.13.0/24MASQUERADE_INTERFACE=eth0CHAIN_NAME=&quot;WIREGUARD_$WIREGUARD_INTERFACE&quot;iptables -t nat -D POSTROUTING -o $MASQUERADE_INTERFACE -j MASQUERADE -s $WIREGUARD_LAN# Remove and delete the WIREGUARD_wg0 chainiptables -D FORWARD -j $CHAIN_NAMEiptables -F $CHAIN_NAMEiptables -X $CHAIN_NAMEBonus: setup PostUp and PostDown in wg-easyIf you’re running wg-easy, you just need to create the scripts inside the config folder and set the environmental variables accordingly. Here’s my docker-compose.yml (post-up.sh and post-down.sh are placed inside config):version: &quot;3.8&quot;services: wg-easy: image: weejewel/wg-easy container_name: wg-easy environment: - WG_HOST=public ip address or ddns - PASSWORD=web-ui-password - WG_PORT=&amp;lt;external-port&amp;gt; - WG_DEFAULT_ADDRESS=10.13.13.x # Wireguard LAN, it must terminate with .x - WG_DEFAULT_DNS=9.9.9.9,149.112.112.112 - WG_MTU=1420 - WG_ALLOWED_IPS=0.0.0.0/0, ::/0 - WG_POST_UP=/etc/wireguard/post-up.sh - WG_POST_DOWN=/etc/wireguard/post-down.sh volumes: - ./config:/etc/wireguard ports: - &amp;lt;external-port&amp;gt;:51820/udp - 8080:51821/tcp cap_add: - NET_ADMIN - SYS_MODULE sysctls: - net.ipv4.ip_forward=1 - net.ipv4.conf.all.src_valid_mark=1 restart: unless-stopped" }, { "title": "How to resize qcow2 disks", "url": "/posts/resize-qcow2-disks/", "categories": "Sysadmin", "tags": "sysadmin, kvm, linux, qcow2, storage", "date": "2023-04-11 23:22:00 +0200", "snippet": "Here’s a brief guide on how to resize qcow2 disks used by KVM virtual machines.First shutdown the VM:sudo virsh shutdown &amp;lt;machine-name&amp;gt;Backup the disk to resize and then expand it (in this case I increase the size by 10 GB):cp disk.qcow2 disk.qcow2.bupsudo qemu-img resize disk.qcow2 +10Gsudo virsh start &amp;lt;machine-name&amp;gt;Now on the guest machine resize the partition:# Assuming that you are using lvm volumes with vda3 the root partitionsudo growpart /dev/vda 3sudo reboot# Open lvmsudo lvm# Use the lvextend command to expand the logical volumelvm&amp;gt; lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv# Resize the filesystemsudo resize2fs /dev/ubuntu-vg/ubuntu-lvDone! 🥳" }, { "title": "How to create VLANs in Ubuntu Server", "url": "/posts/create-vlan-ubuntu-server/", "categories": "Networking", "tags": "linux, networking, netplan, homelab", "date": "2023-04-04 16:10:00 +0200", "snippet": "My self-hosted services are growing in number, so the network configuration has to keep up in terms of security and scalability. My server has a quad port NIC connected to a managed switch which supports 802.1Q VLANs, so in this post I’ll show you how to create VLANs in Ubuntu Server using netplan: Using a terminal, open the netplan configuration file located inside /etc/netplan # In my casesudo nano /etc/netplan/00-installer-config.yaml Choose an available interface (you can get a list with the command ip -c a) and create a new VLAN under the tag vlans. In this case I’m creating just one new virtual interface named vlan.300 with a VLAN ID equal to 300 associated with the interface eno3, but you can create as many VLANs as you want (VLAN IDs ranges between 0 and 4095) network: ethernets: eno3: dhcp4: false vlans: vlan.300: id: 300 link: eno3 dhcp4: falseversion: 2renderer: networkd Now check your new configuration syntax and apply the changes yamllint /etc/netplan/yourconfigsudo netplan apply# or bettersudo reboot Now typing ip -c a you should see the newly create interface among the old ones.Remember to connect the selected physical interface to a tagged/trunked port on your switch." }, { "title": "QEMU/KVM Machines Backup", "url": "/posts/backup-your-server/", "categories": "Sysadmin", "tags": "sysadmin, kvm, linux, backup, storage, borg", "date": "2022-06-08 12:20:00 +0200", "snippet": "Prepare the machinesHaving a lot of self hosted services is a fun hobby, but it also takes a lot of time to setup and configure every VM, so it’s crucial to have a backup of your environment to restore everything you achieved in case of a data loss.Here’s how to do it with Borg.First get a list of your virtual machines:sudo virsh list --allShutdown every running machine, from virt-manager or with sudo virsh shutdown MACHINE_NAME, then dump the configuration of every machine (you can do this even if the VMs are running):sudo virsh dumpxml MACHINE_NAME &amp;gt; /path/to/xml_folder/MACHINE_NAME.xmlNow, check where the .qcow2 disk files are store (default location is /var/lib/libvirt/images/):sudo virsh domblklist MACHINE_NAMEBackupNow that you have all your VMs files, let’s setup a backup with Borg.Borg uses repositories like git’s to stored incremental, compressed and deduplicated backups. Before initializing a new repo you have to choose you’re backup location: it can be a local folder, a folder on a removable disk, a network folder mounted with Samba or NFS or even a remote location using SSH. If you plan to use SSH you should setup an SSH key to access the server.Let’s init the repository:# Mounted folderborg init --encryption=repokey-blake2 /path/to/backup/folder# SSHborg init --encryption=repokey-blake2 ssh://user@ip:port//path/to/backup/folderIf you don’t want encrypted backups or you want to use other encryption algorithms, you can specify --encryption=none for no encryption or --encryption=repokey to use SHA-256.Lastly, let’s create our first backup:# Mounted Foldersudo borg create --stats --progress --compression lz4 /path/to/backup_folder::{hostname}-{now} /path/to/disks_folder /path/to/xml_folder# SSHsudo borg create --stats --progress --compression lz4 ssh://user@ip:port//path/to/backup_folder::{hostname}-{now} /path/to/disks_folder /path/to/xml_folderRestoreTo restore your backups, mount the repo to a folder whit borg mount /path/to/repo /path/to/mountpoint, copy the disk image you want to restore (probably you have to do it with sudo sudo cp src dest) to its original location and then re-define the VM:sudo virsh undefine MACHINE_NAMEsudo virsh define –file /path/to/xml_backup_folder/MACHINE_NAME.xmlCongratulations, you should have restored your VM successfully!Thanks to TSC for the hints." }, { "title": "Manage Drive Images", "url": "/posts/manage-images/", "categories": "Sysadmin", "tags": "linux, administration, sysadmin", "date": "2022-05-30 19:20:00 +0200", "snippet": "When working on multiple projects or you have a nice setup, it is useful to backup the entire boot drive in a .img file either to restore a perfectly working environment (for example after a drive failure or a catastrophic update 🙃) or to switch between multiple projects using the same drive (however beware drive wearing if you use an SSD or an SD card).Here’s how to do it: Note: replace /dev/sda with the drive you want to backup/restore!# Backupsudo dd bs=4M if=/dev/sda of=Drive.img# Restoresudo dd bs=4M if=Drive.img of=/dev/sdaIf you want to use compressed images (recommended):# Backupsudo dd bs=4M if=/dev/sda | gzip &amp;gt; Drive.img.gz# Restoregunzip --stdout Drive.img.gz | sudo dd bs=4M of=/dev/sda" }, { "title": "Raspberry Pi OS Customization", "url": "/posts/raspberry-theme/", "categories": "Linux, Raspberry Pi OS", "tags": "linux, raspberry, raspbian, customization", "date": "2022-05-30 19:00:00 +0200", "snippet": "Install icon theme and theme managersudo apt install arc-theme papirius-icon-themelxappearanceThis will install a dark theme and a pleasant icon theme, then you can change the general OS appearance in lxappearance.Here is my ~/.config/lxterminal/lxterminal.conf:[general]fontname=Fira Code Light 14selchars=-A-Za-z0-9,./?%&amp;amp;#:_scrollback=1000bgcolor=rgb(35,35,47)fgcolor=rgb(189,195,199)palette_color_0=rgb(80,80,95)palette_color_1=rgb(255,86,142)palette_color_2=rgb(100,222,131)palette_color_3=rgb(239,255,115)palette_color_4=rgb(115,169,255)palette_color_5=rgb(148,111,247)palette_color_6=rgb(98,198,218)palette_color_7=rgb(238,232,213)palette_color_8=rgb(80,80,95)palette_color_9=rgb(255,86,142)palette_color_10=rgb(100,222,131)palette_color_11=rgb(239,255,115)palette_color_12=rgb(115,169,255)palette_color_13=rgb(148,111,247)palette_color_14=rgb(98,198,218)palette_color_15=rgb(253,246,227)color_preset=Customdisallowbold=falsecursorblinks=truecursorunderline=trueaudiblebell=falsetabpos=topgeometry_columns=80geometry_rows=24hidescrollbar=falsehidemenubar=falsehideclosebutton=falsehidepointer=falsedisablef10=falsedisablealt=falsedisableconfirm=false[shortcut]new_window_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;nnew_tab_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;tclose_tab_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;wclose_window_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;qcopy_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;cpaste_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;vname_tab_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;iprevious_tab_accel=&amp;lt;Primary&amp;gt;Page_Upnext_tab_accel=&amp;lt;Primary&amp;gt;Page_Downmove_tab_left_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;Page_Upmove_tab_right_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;Page_Downzoom_in_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;pluszoom_out_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;underscorezoom_reset_accel=&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;parenright" }, { "title": "Fix X11 Screen Tearing", "url": "/posts/display-tearing/", "categories": "Linux", "tags": "X11, linux, display, intel", "date": "2022-05-30 18:20:00 +0200", "snippet": " Note: this guide is for Intel Graphics only.Using X11 I’ve always experienced screen tearing while watching videos or scrolling web pages. To improve the general experience and reduce the tearing, you can enable the “Tear Free” option for the Intel Driver. Firstly, if it doesn’t exist, create the config file:mkdir /etc/X11/xorg.conf.dsudo nano /etc/X11/xorg.conf.d/99-intel.confThen, paste the following lines and reboot:Section &quot;Device&quot; Identifier &quot;Intel Graphics&quot; Driver &quot;intel&quot; Option &quot;AccelMethod&quot; &quot;sna&quot; Option &quot;TearFree&quot; &quot;true&quot;EndSectionNow you should have an almost tear free experience." }, { "title": "Terminal Customization", "url": "/posts/zsh-and-ricing/", "categories": "Linux", "tags": "zsh, linux, terminal, customization", "date": "2022-05-30 16:10:00 +0200", "snippet": "Install ZSH and change shellsudo &amp;lt;package-manager install&amp;gt; zsh # apt install for Debian, dnf install for Fedora, etc.chsh -s $(which zsh) Note: in order to change shell for root user, rerun chsh with sudo.This should work on most distros. After the installation reboot or logout.Install oh-my-zshsh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; Note: running a script downloaded from the internet without checking what it does it’s NOT recommended at all, so you can either open the link and check it or download the script and open it in your favorite text editor.Now the first time you open a terminal, it will prompt the config options for zsh, you can generate the default config or use a custom config. I’ll skip it to install my favorite theme and import my .zshrc file:Spaceship themegit clone https://github.com/denysdovhan/spaceship-prompt.git &quot;$ZSH_CUSTOM/themes/spaceship-prompt&quot; --depth=1ln -s &quot;$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme&quot; &quot;$ZSH_CUSTOM/themes/spaceship.zsh-theme&quot; .zshrc config fileexport ZSH=&quot;/home/$USER/.oh-my-zsh&quot;ZSH_THEME=&quot;spaceship&quot;plugins=(git)source $ZSH/oh-my-zsh.shEMOJI=(🚀 👽 ☕ 🐧 🍻 🔮 💾 🍪 🌍 🐫 🦊 🦄 ❄️ ⚡ 🎄 🌈 👻 )function random_emoji { echo -n &quot;$EMOJI[$RANDOM%$#EMOJI+1] &quot;}SPACESHIP_CHAR_PREFIX=&quot;$(random_emoji)&quot;SPACESHIP_USER_SHOW=&quot;always&quot;SPACESHIP_USER_COLOR=&quot;cyan&quot;SPACESHIP_HOST_SHOW=&quot;always&quot;SPACESHIP_HOST_COLOR=&quot;#f241ac&quot;SPACESHIP_HOST_SHOW_FULL=&quot;false&quot;alias df=&#39;df -h /dev/sd* -x tmpfs -x devtmpfs&#39;alias fstab=&#39;sudo micro /etc/fstab&#39;SPACESHIP_NODE_SHOW=&quot;false&quot;ZSH syntax highlightingThe give the final touch to this theme, you can install a syntax highlighter for ZSH:git clone https://github.com/zsh-users/zsh-syntax-highlighting.gitcd zsh-syntax-highlightingecho &quot;source zsh-syntax-highlighting.zsh&quot; &amp;gt;&amp;gt; ~/.zshrcTo get the palette with the numeric codes run this simple script:#!/bin/bashfor((i=16; i&amp;lt;256; i++)); do printf &quot;\\e[48;5;${i}m%03d&quot; $i; printf &#39;\\e[0m&#39;; [ ! $((($i - 15) % 6)) -eq 0 ] &amp;amp;&amp;amp; printf &#39; &#39; || printf &#39;\\n&#39;doneHere’s my .zshrc file updated with syntax highlighting color scheme:export ZSH=&quot;/home/$USER/.oh-my-zsh&quot;ZSH_THEME=&quot;spaceship&quot;plugins=(git)source $ZSH/oh-my-zsh.shEMOJI=(🚀 👽 ☕ 🐧 🍻 🔮 💾 🍪 🌍 🐫 🦊 🦄 ❄️ ⚡ 🎄 🌈 👻 )function random_emoji { echo -n &quot;$EMOJI[$RANDOM%$#EMOJI+1] &quot;}SPACESHIP_CHAR_PREFIX=&quot;$(random_emoji)&quot;SPACESHIP_USER_SHOW=&quot;always&quot;SPACESHIP_USER_COLOR=&quot;cyan&quot;SPACESHIP_HOST_SHOW=&quot;always&quot;SPACESHIP_HOST_COLOR=&quot;#f241ac&quot;SPACESHIP_HOST_SHOW_FULL=&quot;false&quot;alias df=&#39;df -h /dev/sd* -x tmpfs -x devtmpfs&#39;alias fstab=&#39;sudo micro /etc/fstab&#39;SPACESHIP_NODE_SHOW=&quot;false&quot;ZSH_HIGHLIGHT_STYLES[default]=noneZSH_HIGHLIGHT_STYLES[unknown-token]=fg=009ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=009,standoutZSH_HIGHLIGHT_STYLES[alias]=fg=129ZSH_HIGHLIGHT_STYLES[builtin]=fg=075ZSH_HIGHLIGHT_STYLES[function]=fg=003ZSH_HIGHLIGHT_STYLES[command]=fg=014ZSH_HIGHLIGHT_STYLES[precommand]=fg=009,underlineZSH_HIGHLIGHT_STYLES[commandseparator]=noneZSH_HIGHLIGHT_STYLES[hashed-command]=fg=009ZSH_HIGHLIGHT_STYLES[path]=fg=003,italicZSH_HIGHLIGHT_STYLES[globbing]=fg=063ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=white,underlineZSH_HIGHLIGHT_STYLES[single-hyphen-option]=noneZSH_HIGHLIGHT_STYLES[double-hyphen-option]=noneZSH_HIGHLIGHT_STYLES[back-quoted-argument]=noneZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=063ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=063ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=002ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009ZSH_HIGHLIGHT_STYLES[assign]=none " } ]
